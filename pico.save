'use strict';

const gulp = require('gulp');
const sass = require('gulp-sass');
const cssnano = require('gulp-cssnano');
const concat = require('gulp-concat');
const gulpStylelint = require('gulp-stylelint');
const sourcemaps = require('gulp-sourcemaps');
const autoprefixer = require('gulp-autoprefixer');
const eol = require('gulp-eol');
const cssfmt = require('gulp-cssfmt');
const del = require('del');
const request = require('request');
const fs = require('fs');


gulp.task('default', ['down-normalize', 'down-tip', 'lint-css']);

gulp.task('down-normalize', function() {
	fs.access('css/normalize.css', fs.F_OK, function(err) {
		if(!err) {
			return err;
		} else {
			return request('https://necolas.github.io/normalize.css/4.1.1/normalize.css')
				.pipe(fs.createWriteStream('css/normalize.css'));
		}
	});
});

gulp.task('down-tip', function() {
	fs.access('css/bmin.css', fs.F_OK, function(err) {
		if(!err) {
			return err;
		} else {
			return 
request('https://cdnjs.cloudflare.com/ajax/libs/balloon-css/0.2.4/balloon.min.css')
				.pipe(fs.createWriteStream('css/bmin.css'));
		}
	});
});


gulp.task('sass', ['clean'], function() {

	return gulp.src('lib/**/*.scss')
		.pipe(sourcemaps.init())
		.pipe(sass().on('error', sass.logError))
		.pipe(sourcemaps.write())
		.pipe(cssfmt())
		.pipe(eol())
		.pipe(gulp.dest('css'));
});

gulp.task('css-min', ['sass', 'down-normalize', 'down-tip'], function() {

	return gulp.src(['css/normalize.css', 'css/**/*.css'])
		.pipe(autoprefixer({
			browsers: ['last 3 versions']
		}))
		.pipe(cssnano())
		.pipe(concat('wmin.css'))
		.pipe(gulp.dest('min'));
});

gulp.task('lint-css', ['css-min'], function lintCssTask() {

	return gulp
		.src(['css/**/*.css', '!css/normalize.css', '!css/bmin.css'])
		.pipe(gulpStylelint({
			reporters: [{
        failAfterError: false,
				formatter: 'string',
				console: true
			}]
		}));
});

gulp.task('clean', function() {
	return del([
		'min/**/*',
		'css/**/*',
		'!css/normalize.css',
		'!css/bmin.css'
	]);
});

gulp.watch('lib/**/*.scss', ['default']);'use strict';

const gulp = require('gulp');
const sass = require('gulp-sass');
const cssnano = require('gulp-cssnano');
const concat = require('gulp-concat');
const gulpStylelint = require('gulp-stylelint');
const sourcemaps = require('gulp-sourcemaps');
const autoprefixer = require('gulp-autoprefixer');
const eol = require('gulp-eol');
const cssfmt = require('gulp-cssfmt');
const del = require('del');
const request = require('request');
const fs = require('fs');


gulp.task('default', ['down-normalize', 'down-tip', 'lint-css']);

gulp.task('down-normalize', function() {
	fs.access('css/normalize.css', fs.F_OK, function(err) {
		if(!err) {
			return err;
		} else {
			return request('https://necolas.github.io/normalize.css/4.1.1/normalize.css')
				.pipe(fs.createWriteStream('css/normalize.css'));
		}
	});
});

gulp.task('down-tip', function() {
	fs.access('css/bmin.css', fs.F_OK, function(err) {
		if(!err) {
			return err;
		} else {
			return 
request('https://cdnjs.cloudflare.com/ajax/libs/balloon-css/0.2.4/balloon.min.css')
				.pipe(fs.createWriteStream('css/bmin.css'));
		}
	});
});


gulp.task('sass', ['clean'], function() {

	return gulp.src('lib/**/*.scss')
		.pipe(sourcemaps.init())
		.pipe(sass().on('error', sass.logError))
		.pipe(sourcemaps.write())
		.pipe(cssfmt())
		.pipe(eol())
		.pipe(gulp.dest('css'));
});

gulp.task('css-min', ['sass', 'down-normalize', 'down-tip'], function() {

	return gulp.src(['css/normalize.css', 'css/**/*.css'])
		.pipe(autoprefixer({
			browsers: ['last 3 versions']
		}))
		.pipe(cssnano())
		.pipe(concat('wmin.css'))
		.pipe(gulp.dest('min'));
});

gulp.task('lint-css', ['css-min'], function lintCssTask() {

	return gulp
		.src(['css/**/*.css', '!css/normalize.css', '!css/bmin.css'])
		.pipe(gulpStylelint({
			reporters: [{
        failAfterError: false,
				formatter: 'string',
				console: true
			}]
		}));
});

gulp.task('clean', function() {
	return del([
		'min/**/*',
		'css/**/*',
		'!css/normalize.css',
		'!css/bmin.css'
	]);
});

gulp.watch('lib/**/*.scss', ['default']);'use strict';

const gulp = require('gulp');
const sass = require('gulp-sass');
const cssnano = require('gulp-cssnano');
const concat = require('gulp-concat');
const gulpStylelint = require('gulp-stylelint');
const sourcemaps = require('gulp-sourcemaps');
const autoprefixer = require('gulp-autoprefixer');
const eol = require('gulp-eol');
const cssfmt = require('gulp-cssfmt');
const del = require('del');
const request = require('request');
const fs = require('fs');


gulp.task('default', ['down-normalize', 'down-tip', 'lint-css']);

gulp.task('down-normalize', function() {
	fs.access('css/normalize.css', fs.F_OK, function(err) {
		if(!err) {
			return err;
		} else {
			return request('https://necolas.github.io/normalize.css/4.1.1/normalize.css')
				.pipe(fs.createWriteStream('css/normalize.css'));
		}
	});
});

gulp.task('down-tip', function() {
	fs.access('css/bmin.css', fs.F_OK, function(err) {
		if(!err) {
			return err;
		} else {
			return 
request('https://cdnjs.cloudflare.com/ajax/libs/balloon-css/0.2.4/balloon.min.css')
				.pipe(fs.createWriteStream('css/bmin.css'));
		}
	});
});


gulp.task('sass', ['clean'], function() {

	return gulp.src('lib/**/*.scss')
		.pipe(sourcemaps.init())
		.pipe(sass().on('error', sass.logError))
		.pipe(sourcemaps.write())
		.pipe(cssfmt())
		.pipe(eol())
		.pipe(gulp.dest('css'));
});

gulp.task('css-min', ['sass', 'down-normalize', 'down-tip'], function() {

	return gulp.src(['css/normalize.css', 'css/**/*.css'])
		.pipe(autoprefixer({
			browsers: ['last 3 versions']
		}))
		.pipe(cssnano())
		.pipe(concat('wmin.css'))
		.pipe(gulp.dest('min'));
});

gulp.task('lint-css', ['css-min'], function lintCssTask() {

	return gulp
		.src(['css/**/*.css', '!css/normalize.css', '!css/bmin.css'])
		.pipe(gulpStylelint({
			reporters: [{
        failAfterError: false,
				formatter: 'string',
				console: true
			}]
		}));
});

gulp.task('clean', function() {
	return del([
		'min/**/*',
		'css/**/*',
		'!css/normalize.css',
		'!css/bmin.css'
	]);
});

gulp.watch('lib/**/*.scss', ['default']);{
  "rules": {
    "at-rule-no-vendor-prefix": true,
    "block-closing-brace-newline-after": "always",
    "block-closing-brace-newline-before": "always-multi-line",
    "block-closing-brace-space-after": "always-single-line",
    "block-no-empty": true,
    "block-opening-brace-newline-after": "always-multi-line",
    "block-opening-brace-space-after": "always-single-line",
    "block-opening-brace-space-before": "always",
    "color-hex-case": "lower",
    "color-hex-length": "short",
    "color-no-invalid-hex": true,
    "comment-whitespace-inside": "always",
    "declaration-bang-space-after": "never",
    "declaration-bang-space-before": "always",
    "declaration-block-semicolon-newline-after": "always",
    "declaration-block-semicolon-newline-before": "never-multi-line",
    "declaration-block-semicolon-space-after": "always-single-line",
    "declaration-block-semicolon-space-before": "never-single-line",
    "declaration-block-single-line-max-declarations": 1,
    "declaration-colon-newline-after": "always-multi-line",
    "declaration-colon-space-after": "always",
    "declaration-colon-space-before": "never",
    "declaration-no-important": true,
    "function-calc-no-unspaced-operator": true,
    "function-comma-newline-after": "never-multi-line",
    "function-comma-newline-before": "never-multi-line",
    "function-comma-space-after": "always-single-line",
    "function-comma-space-before": "never",
    "function-linear-gradient-no-nonstandard-direction": true,
    "function-parentheses-newline-inside": "always-multi-line",
    "function-parentheses-space-inside": "never",
    "function-whitespace-after": "always",
    "indentation": 2,
    "max-empty-lines": 2,
    "media-feature-colon-space-after": "always",
    "media-feature-colon-space-before": "never",
    "media-feature-name-no-vendor-prefix": true,
    "media-feature-range-operator-space-after": "always",
    "media-feature-range-operator-space-before": "always",
    "media-query-list-comma-newline-after": "always-multi-line",
    "media-query-list-comma-newline-before": "never-multi-line",
    "media-query-list-comma-space-after": "always-single-line",
    "media-query-list-comma-space-before": "never",
    "no-eol-whitespace": true,
    "no-missing-eof-newline": true,
    "number-no-trailing-zeros": true,
    "property-no-vendor-prefix": true,
    "selector-combinator-space-after": "always",
    "selector-combinator-space-before": "always",
    "selector-list-comma-newline-after": "always-multi-line",
    "selector-list-comma-newline-before": "never-multi-line",
    "selector-list-comma-space-before": "never",
    "selector-no-vendor-prefix": true,
    "selector-root-no-composition": true,
    "value-list-comma-newline-after": "always-multi-line",
    "value-list-comma-newline-before": "never-multi-line",
    "value-list-comma-space-after": "always-single-line",
    "value-list-comma-space-before": "never",
    "value-no-vendor-prefix": true
  }
}
